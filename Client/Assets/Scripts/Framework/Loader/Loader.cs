// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Loader.加载器，暂时搁置
/// </summary>
public class Loader : ILoader
{
    private static readonly int MAX_RESOURCES_LOADERS = 4;
    private static readonly int MAX_ASSETBUNDLE_LOADERS = 1;

    private List<Coroutine> resourcesList = new List<Coroutine>();
    private List<Coroutine> assetbundleList = new List<Coroutine>();
    private Queue<Coroutine> resourcesQueue = new Queue<Coroutine>();
    private Queue<Coroutine> assetbundleQueue = new Queue<Coroutine>();

    private bool loaded = false;

    public void ResourceLoad<T>(string path,LoadCallBack<T> callback) where T:Object{
        if(path.Contains("Resources/")){
            Debug.LogError("the path is illegal");
            return;
        }
        int indexOfDot = path.LastIndexOf('.');
        if(indexOfDot > 0){
            path = path.Substring(0,indexOfDot);
        }
        //Loader loader = GetLoader(false);
//        if(loader != null){
//
//        }
    }
    public void AssetBundleLoad<T>(string path,LoadCallBack<T> callback) where T : Object{

    }
    public void AssetBundleLoad<T>(string path,string assetName,LoadCallBack<T> callback) where T : Object{

    }
    public void CommonLoad<T>(string path,LoadCallBack<T> callback) where T : Object{

    }
    public void UnLoad(string path){

    }
    public void UnLoadAll(){

    }

//    private Loader GetLoader(string isAssetBundle){
//        List<Loader> loaders = isAssetBundle ? assetbundleList : resourcesList;
//        for(int i = 0, iMax = loaders.Count; i < iMax; i ++){
//            if(!loaders[i].loaded){
//                return loaders[i];
//            }
//        }
//
//        int max = isAssetBundle ? MAX_ASSETBUNDLE_LOADERS : MAX_RESOURCES_LOADERS;
//        if(loaders.Count < max){
//            Loader loader = CoroutineInstance.InitCoroutine()
//        }
//    }

}


